@page "/account"
@using BankManagementSystemUI.Data
@using System.ComponentModel.DataAnnotations
@using BankManagementSystemUI.Services
@using System.Linq
@inject ISignalRWrapper SignalRWrapper;
@inject IAccountManagerClient AccountManagerClient;
@inject ICurrentAccountHolder CurrentAccountHolder;

<PageTitle>Account</PageTitle>

<h1>Account</h1>

<input type="text" class="txt-primary" @bind="_customerRegistrationInfo.FirstName" placeholder="First Name" />
<input type="text" class="txt-primary" @bind="_customerRegistrationInfo.LastName" placeholder="Last Name" />
<input type="text" class="txt-primary" @bind="_customerRegistrationInfo.Email" placeholder="Email" />
<input type="text" class="txt-primary" @bind="_customerRegistrationInfo.PhoneNumber" placeholder="Phone Number" />
<input type="text" class="txt-primary" @bind="_customerRegistrationInfo.Address" placeholder="Address" />
<input type="text" class="txt-primary" @bind="_customerRegistrationInfo.City" placeholder="City" />
<input type="text" class="txt-primary" @bind="_customerRegistrationInfo.State" placeholder="State" />
<input type="text" class="txt-primary" @bind="_customerRegistrationInfo.ZipCode" placeholder="Zip Code" />

<button class="btn btn-primary" @onclick="CreateAccountAsync">Create Account</button>

@*Display the current customer info*@
@if (!string.IsNullOrEmpty(CurrentAccountHolder.CustomerInfo.Email))
{
    <h2>Customer Info</h2>
    <table class="table">
        <tr>
            <th>Account Id</th>
            <th>Name</th>
            <th>Email</th>
            <th>Phone Number</th>
            <th>Address</th>
        </tr>
        <tr>
            <td>@CurrentAccountHolder.CustomerInfo.AccountId</td>
            <td>@CurrentAccountHolder.CustomerInfo.FullName</td>
            <td>@CurrentAccountHolder.CustomerInfo.Email</td>
            <td>@CurrentAccountHolder.CustomerInfo.PhoneNumber</td>
            <td>@CurrentAccountHolder.CustomerInfo.FullAddress</td>
        </tr>
    </table>
}

@code {
    private CustomerRegistrationInfo _customerRegistrationInfo = new CustomerRegistrationInfo();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SignalRWrapper.OnSignalREvent += OnSignalREvent;
    }
    
    private async Task CreateAccountAsync()
    {
        _customerRegistrationInfo.CallerId = "Teller1";
        _customerRegistrationInfo.SchemaVersion = "1.0";
        _customerRegistrationInfo.RequestId = Guid.NewGuid().ToString();
        var accountCreatedEvent = await AccountManagerClient.RegisterCustomerAsync(_customerRegistrationInfo);
    }

    public void Dispose()
    {
        SignalRWrapper.OnSignalREvent -= OnSignalREvent;
    }
    
    private void OnSignalREvent(object? sender, AccountCallbackRequest args)
    {
        if (args.IsSuccessful && args.RequestId == _customerRegistrationInfo.RequestId)
        {
            CurrentAccountHolder.CustomerInfo.FullAddress = $"{_customerRegistrationInfo.Address} {_customerRegistrationInfo.City} {_customerRegistrationInfo.State} {_customerRegistrationInfo.ZipCode}";
            CurrentAccountHolder.CustomerInfo.Email = _customerRegistrationInfo.Email;
            CurrentAccountHolder.CustomerInfo.FullName = $"{_customerRegistrationInfo.FirstName} {_customerRegistrationInfo.LastName}";
            CurrentAccountHolder.CustomerInfo.PhoneNumber = _customerRegistrationInfo.PhoneNumber;
            CurrentAccountHolder.CustomerInfo.AccountId = args.AccountId;
           
            StateHasChanged();
        }
    }
}
