@page "/transactions"
@using BankManagementSystemUI.Data
@using BankManagementSystemUI.Services
@inject ISignalRWrapper SignalRWrapper;
@inject IAccountManagerClient AccountManagerClient;
@inject ICurrentAccountHolder CurrentAccountHolder;
@inject IJSRuntime JsRuntime


<PageTitle>Transactions</PageTitle>

<h1>Transactions</h1>

<p role="status">Current balance: @CurrentAccountHolder.Balance</p>

<input type="text" class="txt-primary" @bind="_amount" placeholder="Amount" />

<button class="btn btn-primary" @onclick="DepositAsync" disabled="@IsDisabled">Deposit</button>
<button class="btn btn-primary" @onclick="WithdrawAsync" disabled="@IsDisabled">Withdraw</button>

<div>
    <p><button class="btn btn-primary" disabled="@IsDisabled" @onclick="GetTransactionsAsync">Get Transaction History</button></p>
    @if (_transactions != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Account Id</th>
                    <th>Amount</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in _transactions)
                {
                    <tr>
                        <td>@transaction.TransactionTime.ToLocalTime()</td>
                        <td>@transaction.AccountId</td>
                        <td>@transaction.TransactionAmount</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@code {

    private decimal _amount;
    private IList<AccountTransactionResponse>? _transactions;

    private bool IsDisabled => string.IsNullOrEmpty(CurrentAccountHolder.CustomerInfo.AccountId);

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        SignalRWrapper.OnSignalREvent += OnSignalREvent;
    }

    public void Dispose()
    {
        SignalRWrapper.OnSignalREvent -= OnSignalREvent;
    }

    private void OnSignalREvent(object? sender, AccountCallbackRequest args)
    {
        if (args.IsSuccessful && args.AccountId == CurrentAccountHolder.CustomerInfo.AccountId)
        {
            Task.Run(async () => await UpdateBalanceAsync());
        }

        if (!args.IsSuccessful && !string.IsNullOrEmpty(args.ResultMessage))
        {
            Task.Run(async () => await AlertAsync(args.ResultMessage));
        }
    }

    private async Task AlertAsync(string info)
    {
        await JsRuntime.InvokeVoidAsync("alert", info);
    }

    private async Task UpdateBalanceAsync()
    {
        CurrentAccountHolder.Balance = await
            AccountManagerClient.GetAccountBalanceAsync(CurrentAccountHolder.CustomerInfo.AccountId!) ?? 0;
        await InvokeAsync(StateHasChanged);
    }

    private async Task DepositAsync()
    {
        await AccountManagerClient.DepositAsync(CurrentAccountHolder.CustomerInfo.AccountId!, _amount);
    }

    private async Task WithdrawAsync()
    {
        var result = await AccountManagerClient.WithdrawAsync(CurrentAccountHolder.CustomerInfo.AccountId!, _amount);
        if (result != null && result.StatusCode != System.Net.HttpStatusCode.OK)
        {
            var message = await result.Content.ReadAsStringAsync();
            await AlertAsync(message);
        }
    }

    private async Task GetTransactionsAsync()
    {
        _transactions = await AccountManagerClient.GetAccountTransactionHistory(CurrentAccountHolder.CustomerInfo.AccountId!);
    }
}
